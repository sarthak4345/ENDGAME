import java.util.*;
import java.io.*;


public class PassOne {

	BufferedReader br;
	LinkedHashMap<String,TableRow>SYMTAB;
	ArrayList<TableRow>LITTAB;
	ArrayList<Integer>POOLTAB;
	int lc=0;
	int symIndex=0;
	int litIndex=0,littab_ptr=0;
	int pooltab_ptr=0;
	MnemonicTable mnemonicTable;
	
	public PassOne() {
		
		SYMTAB = new LinkedHashMap<>();
		LITTAB = new ArrayList<>();
		POOLTAB = new ArrayList<>();
		lc=0;
		POOLTAB.add(0);
		mnemonicTable = new MnemonicTable();
	}
	
	public static void main(String[] args) throws IOException {
		
		PassOne p = new PassOne();
		
		p.parseFile();

	}

	private void parseFile() throws IOException {
		
		br = new BufferedReader(new FileReader("input.asm"));
		BufferedWriter bw = new BufferedWriter(new FileWriter("IC.txt"));
		String line,code;
		
		while((line = br.readLine())!=null) {
			
			String parts[] = line.split("\\s+");
			
			if(!parts[0].isEmpty()) {
				
				if(SYMTAB.containsKey(parts[0])) {
					
					SYMTAB.put(parts[0], new TableRow(parts[0],SYMTAB.get(parts[0]).getIndex()));
					
				}else {
					
					SYMTAB.put(parts[0], new TableRow(++symIndex,parts[0],lc));
				}
				
			}
			
			if(parts[1].equals("LTORG"))){
				
				
			}
			
			if(parts[1].equals("START")) {
				
				lc = Integer.parseInt(parts[2]);
				code = "(AD,01)\t(C,"+lc+")\n";
				bw.write(code);
				
			}else if(parts[1].equals("ORIGIN")) {
				
				
				if(parts[2].contains("+")) {
					String splits[] = parts[2].split("+");
					lc = SYMTAB.get(splits[1]).getAddress()+Integer.parseInt(splits[1]);
					code = "(AD,03)\t(S,"+SYMTAB.get(splits[0]).getIndex()+")+"+Integer.parseInt(splits[1]);
					bw.write(code);
					
				}else if(parts[2].contains("-")) {
					
					String splits[] = parts[2].split("-");
					lc = SYMTAB.get(splits[1]).getAddress()-Integer.parseInt(splits[1]);
					code = "(AD,03)\t(S,"+SYMTAB.get(splits[0]).getIndex()+")-"+Integer.parseInt(splits[1]);
					bw.write(code);
					
				}else {
					
					lc = SYMTAB.get(parts[2]).getAddress();
					code = "(AD,03)\t(S,"+SYMTAB.get(parts[2]).getIndex()+")\n";
					bw.write(code);
				}
				
			}
			
			
			
		}
	}

}
